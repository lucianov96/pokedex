* {
    box-sizing: border-box;
}

.logo {
    top:2.5px;
    width: 48px;
    height: 48px;
    background: url("../img/logo.png");
    background-repeat: no-repeat;
    font-size: 0;
    z-index: 1031;
    }

.bold {
    font-weight: bold;
}

/* Tuneamos la barra de navegación pisando las clases del framework. */

.navbar {
    padding: 0;
}

.navbar-nav {
    width: 100%;
    background: none;
    flex-wrap: nowrap;
}

/* Repartimos el ancho de los botones en partes iguales. */

.nav-item {
    flex: 1;
    padding: 0;
}

.nav-link {
    background-color: none;
    text-align: center;
}

/* Le damos un tamaño a las img de los botones y les aplicamos transparencia para poner como activa solo la vista actualmente en foco de navegación con opacidad 1. */

img[src*=".png"] {
    max-height: 300px;
}

img[src*=".svg"] {
    height: 1.25em;
    opacity: .5;
}

/* Inicialmente, ponemos como activa la img del primer botón (la sección uno) con opacidad 1. */

nav .nav-item:nth-of-type(1) img[src*=".svg"] {
    opacity: 1;
}

/* Con cualquier page en target (los containers que tienen aplicado el attr data-role page que corresponden a cada vista de la app), pasamos a todas las img a opacidad .5 (para desmarcar la que estuviera activa ya que no sabemos cuál era). Por eso ubicamos el nav por debajo de todo el resto para poder seleccionarlo con el operador de hermanos (~). */

[data-role="page"]:target ~ nav .nav-item img[src*=".svg"] {
    opacity: .5;
}

/* Y luego evaluamos qué page está en target para marcar la img del botón correspondiente como activa con opacidad 1. */

#uno:target ~ nav .nav-item:nth-of-type(1) img[src*=".svg"] {
    opacity: 1;
}

#dos:target ~ nav .nav-item:nth-of-type(2) img[src*=".svg"] {
    opacity: 1;
}

/* Seleccionamos a todas las vistas (containers con attr data-role page) por atributo/valor y las ocultamos con display none. Además les damos posicionamiento absoluto y las ubicamos en el vértice superior izquierdo de la ventana del browser y les aplicamos un margen inferior del tamaño del nav ubicado en la parte inferior de la ventana con posición fija para que no queden tapadas en su contenido. */

[data-role="page"] {
    display: none;
    position: absolute;
    top: 0;
    left: 0;
    margin-bottom: 2.5rem;
}

/* Pero la vista uno le aplicamos display block para que se vea inicialmente. */

#uno {
    display: block;
}

/* Como la navegación es por target (o vínculo ancla) la vista en target se hace visible. */

[data-role="page"]:target {
    display: block;
}

#dos:target ~ #uno,
#tres:target ~ #uno {
    display: none;
}


/* Ubicamos a la derecha el botón que abre el modal. */

#modal{
    display: block;
}

.btn_header {
    position: absolute;
    right: 20px;
    top: 15px;
}

.btn_data {
    position: absolute;
    right: 80px;
    top: 15px;
}

/* Le damos un tamaño a los cards de la table-responsive para que scrolleen en el eje horizontal de manera interna en la tabla. */

.card_table {
    width: 40vw;
}

/* Le aplicamos el formato al alert que trabaja como publicidad en la vista inicial. */

.pokemon-search{
    width: 100%;
    font-size: 2em;
    margin: 0.05em;
}

.title-skill{
    font-weight: bold;
}

.tr td:nth-child(1){
    width: 15%;
}

.tr td:nth-child(2){
    width: 5%;
}

.tr td:nth-child(3){
    width: 80%;
}

.title {
    color: gray;
    font-size: 2em;
    border-bottom: 1px solid gray;
    display: inline-block;
    width: 100%;
    margin-bottom: 0.5em;
}

#filters {
    border-bottom: 1px solid gray;
    display: none;
}

#filterTable {
    font-size: 1.5em;
    width: 100%;
    text-align: center;
}

#filterTable tr {
    padding-top: 1em;
    padding-bottom: 1em;
}

#filterTable td {
    width: 30%;
}

#filterTable td select {
    width: 80%;
    cursor: pointer;
}

#filterTable td input[type=number], #filterTable td input[type=text] {
    width: 80%;
    text-align: center;
}

.pokebutton {
    font-size: 1.5em;
    font-family: 'Pokemon Solid';
    background-image: linear-gradient(#FF4A3C, #DD3311);
    color: #ffff55;
}

.rounded {
    font-size: 1em;
    padding: 0.1 em;
    border-radius: 50% !important;
    background-image: linear-gradient(#FF4A3C, #DD3311);
    color: #ffff55;
}

.applybutton {
    font-size: 1.5em;
    background-image: linear-gradient(#FF4A3C, #DD3311);
    color: white;
}

.clearbutton {
    font-size: 1.5em;
    background-color: white;
    color: #AA2200;
    border: 1px solid #A20;    
}

.clearbutton:hover {
    color: #FF4A3C;
    border: 1px solid #F43;
    
}

.pokebutton:hover {
    color: #ffff55 !important;
}

.absolute{
    position: absolute;
    z-index: 999;
}

.pokebutton:hover, .applybutton:hover{
    background-image: linear-gradient(#ff5545, #ff4422);
}

.pokemon-pick{
    cursor: pointer;
}

.primary {
    background: #FF4A3C;
}

.movement-col{
    width: 20%;
}
  
  .loader {
    width: 100%;
    position: fixed;
    align-items: center;
    display: flex;
    background: rgba(0, 0, 0, 0.3);
    height: 100%;
    justify-content: center;
    margin: 0;
    z-index: 1050;
  }
  
  .loader-wheel {
    animation: spin 1s infinite linear;
    border: 2px solid rgba(30, 30, 30, 0.5);
    border-left: 4px solid #fff;
    border-radius: 50%;
    height: 50px;
    margin-bottom: 10px;
    width: 50px;
  }
  
  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
  
  @keyframes load {
    0% {
      content: 'Loading';
    }
    33% {
      content: 'Loading.';
    }
    67% {
      content: 'Loading..';
    }
    100% {
      content: 'Loading...';
    }
  }